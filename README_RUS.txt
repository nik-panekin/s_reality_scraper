Утилита для парсинга сайта объектов недвижимости.

Исходный поисковый запрос:
    https://www.sreality.cz/hledani/prodej/byty/praha?bez-aukce=1

Формат вызова:
    s_reality_scraper.py build [options] | update | check | cleanup | vacuum

Команды:
    build - выполняет парсинг объектов недвижимости из каталога;

    check - проверяет, доступен ли на сайте ранее извлечённый объект;
        если объект уже недоступен, устанавливает в базе отметку 'removed';

    cleanup - удаляет все записи об объектах с отметкой 'removed' из базы;

    vacuum - удаляет все фотографии объектов недвижимости, не имеющих связей с
        актуальными объектами из базы.

Опции команды build:
    --restart - сбрасывает прогресс процесса парсинга, создавая резервную
        копию базы и удаляя оригинал;

    --use_cache - не загружает изображения объектов недвижимости, если они уже
        были загружены ранее; рекомендуется к использованию (кроме особых
        случаев), т.к. данная опция значительно ускоряет процесс парсинга;

    --update - запускает процесс парсинга с самого начала, не удаляя при этом
        базу; новые объекты будут добавляться в конец файла;

    --today - выполняет парсинг только для объектов, добавленных на текущую
        дату.

Примеры использования:
    1. Обновить базу, произведя поиск по объектам, добавленным только сегодня,
    по возможности, используя кэш изображений:
        s_reality_scraper.py build --use_cache --update --today

    2. Проверить актуальность объектов в базе, затем физически удалить
    неактуальные из файла CSV и, наконец, "почистить" папку с изображениями:
        s_reality_scraper.py check
        s_reality_scraper.py cleanup
        s_reality_scraper.py vacuum

Используйте сочетание CTRL-C для остановки работы скрипта.

Особенности скрипта:
    - поскольку процесс парсинга может быть очень длительным, предусмотрена
      возможность прерывания работы скрипта с последующим возобновлением
      (парсинг будет продолжен с последней обработанной страницы поиска);
    - программный код следит за тем, чтобы в базе не было дубликатов объектов;
    - все операции, выполняемые скриптом, и сообщения об ошибках записываются
      в журнал.

Создаваемые файлы и папки:
    - estates.csv - база данных объектов недвижимости в виде CSV-файла;
    - img - изображения объектов недвижимости;
    - json - "сырые" данные, могут быть использованы для отладки;
    - last_processed_page.txt - файл с номером последней обработанной страницы;
    - logs - файлы журналов сообщений и ошибок.

Для работы скрипта требуется Python 3.8.6 или старше.

Все зависимости перечислены в файле requirements.txt.
